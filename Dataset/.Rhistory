lag(1:5)
lead(1:5)
x <- 1:5
tibble(behind = lag(x), x, ahead = lead(x))
x <- 1:10
mean(x)
plot(pressure)
x <- 1:10
mean(x)
cars
summary(cars)
x <- 1:10
mean(x)
x <- 1:10
mean(x)
x
x <- 1:10
mean(x)
cars
summary(cars)
x <- 1:10
mean(x)
library(shiny)
runExample()
runExample("01_hello")
runExample("02_text")
runExample("03_reactivity")
runApp('shinnyApp')
library(shiny)
runExample("03_reactivity")
head(faithful)
x <- faithful[,2]
hist(x)
myVar <- 30
class(myVar)
library(shiny)
library(leaflet)
library(leaflet.extras2)
library(leaflet.extras)
library(rgdal)
library(readxl)
library(DT)
getwd()
shiny::runApp('D:/GIS CROP PROJECT/RCODES/PMRU/app')
library(plumber)
register_serializer()
registered_serializers()
plumb(file='D:/GIS CROP PROJECT/RCODES/REST API/MapExample.R')$run()
if (interactive()) {
ui <- fluidPage(
radioButtons("dist", "Distribution type:",
c("Normal" = "norm",
"Uniform" = "unif",
"Log-normal" = "lnorm",
"Exponential" = "exp")),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
hist(dist(500))
})
}
shinyApp(ui, server)
ui <- fluidPage(
radioButtons("rb", "Choose one:",
choiceNames = list(
icon("calendar"),
HTML("<p style='color:red;'>Red Text</p>"),
"Normal text"
),
choiceValues = list(
"icon", "html", "text"
)),
textOutput("txt")
)
server <- function(input, output) {
output$txt <- renderText({
paste("You chose", input$rb)
})
}
shinyApp(ui, server)
}
# loading required packages
library(shinydashboard)
library(png)
library(shinydashboardPlus)
library(shiny)
library(htmltools)
library(leaflet)
library(leaflet.extras2)
library(leaflet.extras)
library(dplyr)
library(rgdal)
library(readxl)
library(DT)
library(tmaptools)
library(RColorBrewer)
library(tidyr)
if (interactive()) {
ui <- fluidPage(
radioButtons("dist", "Distribution type:",
c("Normal" = "norm",
"Uniform" = "unif",
"Log-normal" = "lnorm",
"Exponential" = "exp")),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
hist(dist(500))
})
}
shinyApp(ui, server)
ui <- fluidPage(
radioButtons("rb", "Choose one:",
choiceNames = list(
icon("calendar"),
HTML("<p style='color:red;'>Red Text</p>"),
"Normal text"
),
choiceValues = list(
"icon", "html", "text"
)),
textOutput("txt")
)
server <- function(input, output) {
output$txt <- renderText({
paste("You chose", input$rb)
})
}
shinyApp(ui, server)
}
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app')
for(i in c(-1:3, 9))  print(switch(i, 1, 2 , 3, 4))
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app')
shiny::runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
install.packages("shinythemes")
library(shinythemes)
themeSelector()
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
shinytheme()
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Value boxes"),
dashboardSidebar(),
dashboardBody(
fluidRow(
# A static valueBox
valueBox(10 * 2, "New Orders", icon = icon("credit-card")),
# Dynamic valueBoxes
valueBoxOutput("progressBox"),
valueBoxOutput("approvalBox")
),
fluidRow(
# Clicking this will increment the progress amount
box(width = 4, actionButton("count", "Increment progress"))
)
)
)
server <- function(input, output) {
output$progressBox <- renderValueBox({
valueBox(
paste0(25 + input$count, "%"), "Progress", icon = icon("list"),
color = "purple"
)
})
output$approvalBox <- renderValueBox({
valueBox(
"80%", "Approval", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow"
)
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Value boxes"),
dashboardSidebar(),
dashboardBody(
fluidRow(
# A static valueBox
valueBox(10 * 2, "New Orders", icon = icon("credit-card")),
# Dynamic valueBoxes
valueBoxOutput("progressBox"),
valueBoxOutput("approvalBox")
),
fluidRow(
# Clicking this will increment the progress amount
box(width = 4, actionButton("count", "Increment progress"))
)
)
)
server <- function(input, output) {
output$progressBox <- renderValueBox({
valueBox(
paste0(25 + input$count, "%"), "Progress", icon = icon("list"),
color = "purple"
)
})
output$approvalBox <- renderValueBox({
valueBox(
"80%", "Approval", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow"
)
})
}
shinyApp(ui, server)
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app.new')
state@polygons[[1]]
View(server)
View(scol)
runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app')
library(rgdal)
install.packages("spdplyr")
install.packages("geojsonio")
library(geojsonio)
shapefile <- readOGR("D:\\QGIS\\PUNE_UTM",
"PUBLIC_BUILDINGS")
plot(shapefile)
plot(shapefile)
shape_json <- geojson_json(shapefile)
geojson_write(shape_json, file = "D:\\QGIS\\PUNE_UTM\\shape.geojson")
library(shiny); runApp('D:/Statistics and R/RShiny/ShinyApp3.R')
library(shiny); runApp('D:/Statistics and R/RShiny/ShinyApp3.R')
runApp('D:/Statistics and R/RShiny/ShinyApp3.R')
shiny::runApp('D:/GIS CROP PROJECT/RCODES/RStateWiseProjects/app')
v <- c(7,12,28,3,34,41)
t <- c(14,7,30,15,20,42)
plot(v,
type = "o",
col  = "red",
xlab = "Months",
ylab = "Rainfall in mm",
main = "Rainfall Chart",
pch = 16,
lwd = 2)
lines(t,
col = "red",
type = "o",
pch = 16,
lwd = 2)
plot(v,
type = "o",
col  = "red",
xlab = "Months",
ylab = "Rainfall in mm",
main = "Rainfall Chart",
pch = 16,
lwd = 2)
lines(t,
col = "blue",
type = "o",
pch = 16,
lwd = 2)
library(ggplot2)
rainfall <- data.frame(x = 1:6, v, t)
ggplot(data = rainfall,
aes(x = x, y = v)) + geom_point()
ggplot(data = rainfall,
aes(x = x, y = v)) +
geom_point(colour = "blue", size = 2)
ggplot(data = rainfall,
aes(x = x, y = v)) +
geom_point(colour = "blue", size = 2) +
geom_point(data = rainfall,
aes(x =x, y = t),
colour = "red",
size = 2)
ggplot(data = rainfall, aes(x,v)) +
geom_point(colour = "red", size = 2) +
geom_line(colour = "red", linewidth = 1) +
geom_point(data = rainfall, aes(y=t),
colour = "blue",
size = 2) +
geom_line(data = rainfall, aes(y=t),
colour = "blue",
linewidth = 1) +
xlab("Months") +
ylab("Rainfall in mm") +
ggtitle("Rainfall Chart") +
theme_dark()
ggplot(data = iris,
aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(colour = "red")
?geom_histogram()
ggplot(data = iris, aes(Sepal.Length)) +
geom_histogram()
ggplot(data = iris, aes(Sepal.Length)) +
geom_histogram(binwidth = 0.01 , bins = 20 )
ggplot(data = iris, aes(Sepal.Length)) +
geom_histogram(binwidth = 1 , bins = 10 )
ggplot(data = iris, aes(Sepal.Length)) +
geom_histogram(binwidth = 0.6 , bins = 10 )
ggplot(data = iris, aes(Sepal.Length)) +
geom_histogram(binwidth = 0.6 , bins = 20 )
ggplot(data = iris, aes(Sepal.Length)) +
geom_histogram(binwidth = 0.3 , bins = 20 )
ggplot(data = iris, aes(Sepal.Length)) +
geom_boxplot()
?geom_boxplot()
ggplot(data = iris, aes(y =Sepal.Length)) +
geom_boxplot()
head(iris)
iris1 <- iris[,c(1:4)]
names(iris1)
summary(iris1)
str(iris1)
# mean() : returns the mean of the numeric vector
mean(iris1$Sepal.Length)
# median() : returns the median of the numeric vector
median(iris1$Sepal.Length)
gm <- prod(iris1$Sepal.Length)^(1/nrow(iris1))
gm
hm <- rnow(iris1)/(sum(1/iris1$Sepal.Length))
hm <- nrow(iris1)/(sum(1/iris1$Sepal.Length))
hm
install.packages("psych")
library(psych)
geometric.mean(iris1$Sepal.Length)
harmonic.mean(iris1$Sepal.Length)
# minimum value in a vector
min(iris1$Sepal.Length)
# maximum value in a vector
max(iris1$Sepal.Length)
nrow(iris1)
ncol(iris1)
# var() retruns variance of the vector
var(iris1$Sepal.Length)
# sd() returns the standard deviation of the vector
sd(iris1$Sepal.Length)
# cov() returns the covariance of two vectors / variables
cov(iris1$Sepal.Length, iris1$Sepal.Width)
# cor() returns the correlation between two variables / vectors
cor(iris1$Sepal.Length, iris1$Sepal.Width)
View(iris1)
cor(iris1)
cor(iris1)
cov(iris1)
# returns the sum of each columns
colSums(iris1)
# returns the sum of each row
rowSums(iris1)
# returns the mean of each column
colMeans(iris1)
# returns the mean of each rows
rowMeans(iris1)
library(outliers)
outlier(iris1$Sepal.Length)
outlier(iris1$Sepal.Length, opposite = TRUE)
cor(iris1$Sepal.Length, use = "everything",
method = "pearson")
cor(iris1, use = "everything",
method = "pearson")
cor(iris1, use = "everything",
method = "pearson")
cor(iris1, use = "everything",
method = "spearman")
cor(iris1, use = "everything",
method = "kendall")
pairs(data = iris1,
~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width)
# inside the psych package
# returns the correlation matrix
corr.test(iris1,
use = "everything",
method = "pearson",
adjust = "none")
# inside the psych package
# returns the correlation matrix
corr.test(iris1,
use = "everything",
method = "pearson",
adjust = "none")
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
chart.Correlation(iris1,
use = "pairwise",
method = "pearson",
histogram = TRUE,
pch = 16)
mean(iris1$Sepal.Width)
iris1 <- iris[,c(1:4)]
cor(iris1)
cor(iris1)
Lmodel <- lm(Petal.Width ~ Petal.Length,
data = iris1)
summary(Lmodel)
predict(Lmodel,
newdata = data.frame(Petal.Length = c(1,4,6,3)))
length1 <- seq(min(iris1$Petal.Length),
max(iris1$Petal.Length,
by = 0.1))
length(length1)
min(iris1$Petal.Length)
max(iris1$Petal.Length
)
length1 <- seq(min(iris1$Petal.Length),
max(iris1$Petal.Length),
by = 0.1))
length1 <- seq(min(iris1$Petal.Length),
max(iris1$Petal.Length),
by = 0.1)
length(length1)
length1
predict.data <- predict(Lmodel,
newdata = data.frame(Petal.Length = length1))
predict.data
petal <- data.frame(Petal.Length = length1,
Petal.Width = predict.data)
View(petal)
View(iris)
View(iris1)
cor(iris1)
df <- data.frame(Petal.Length = c(1,4,6,3))
predict(Lmodel,
newdata = df)
EvenOdd <- function(x){
if(x%%2 == 0){
print("Number is even")
} else {
print("Number is odd")
}
}
EvenOdd(5)
EvenOdd(8)
v <- 1:20
VectSum <- function(x){
sum <- 0
for(i in x){
sum = sum + i
}
return(sum)
}
VectSum(v)
VectSum <- function(x){
sum <- 0
for(i in x){
sum <- sum + i
}
return(sum)
}
VectSum(v)
a <- VectSum(v)
a
# check the path of the installed packages
.libPaths()
# search() : returns the packages which are loaded in your curren working directory
search()
# installing a package
install.packages("ggplot2")
# load the package
library(ggplot2)
# datarium >> contains sample data sets
install.packages("datarium")
library(datarium)
# checking the sample data sets avialable
data()
search()
# get your current working directory
getwd()
# checking the sample data sets available
data()
d <- data("diamonds", package = "ggplot2")
# checking the sample data sets available
data()
d <- diamonds
# set the current working directly
setwd("C:\\Users\\Acer\\Desktop\\R\\Dataset")
# OR
setwd("C:/Users/Acer/Desktop/R/Dataset")
getwd()
